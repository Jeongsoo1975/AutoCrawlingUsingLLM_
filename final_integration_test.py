# final_integration_test.py\n\"\"\"\n최종 통합 테스트 - 모든 개선사항 검증\n\"\"\"\nimport asyncio\nimport logging\nimport os\nimport sys\nimport time\nfrom config import settings\nfrom utils.logger import setup_logger\nfrom utils.error_handler import create_error_report, save_error_log\n\n# 로거 설정\nsetup_logger()\nlogger = logging.getLogger(__name__)\n\nclass IntegrationTestSuite:\n    def __init__(self):\n        self.test_results = {}\n        self.errors = []\n        \n    async def run_all_tests(self):\n        \"\"\"모든 통합 테스트 실행\"\"\"\n        logger.info(\"=== 최종 통합 테스트 시작 ===\\n\")\n        \n        test_methods = [\n            self.test_llm_connection,\n            self.test_web_search,\n            self.test_browser_controller,\n            self.test_pipeline_initialization,\n            self.test_error_handling\n        ]\n        \n        for test_method in test_methods:\n            test_name = test_method.__name__\n            try:\n                logger.info(f\"🧪 실행 중: {test_name}\")\n                result = await test_method()\n                self.test_results[test_name] = result\n                status = \"✅ 성공\" if result else \"❌ 실패\"\n                logger.info(f\"{test_name}: {status}\\n\")\n            except Exception as e:\n                self.test_results[test_name] = False\n                error_report = create_error_report(e, {\"test\": test_name})\n                self.errors.append(error_report)\n                logger.error(f\"❌ {test_name} 실행 중 오류: {e}\\n\")\n        \n        return self.generate_final_report()\n    \n    async def test_llm_connection(self):\n        \"\"\"LLM 연결 테스트\"\"\"\n        try:\n            from core.llm_handler import LLMHandler\n            \n            llm = LLMHandler()\n            messages = [{\"role\": \"user\", \"content\": \"간단한 연결 테스트입니다. '연결 성공'이라고 답변해주세요.\"}]\n            \n            response = await llm.chat_completion(messages)\n            \n            if response and \"연결\" in response:\n                logger.info(f\"LLM 응답: {response[:100]}...\")\n                return True\n            else:\n                logger.warning(f\"예상과 다른 LLM 응답: {response}\")\n                return False\n                \n        except Exception as e:\n            logger.error(f\"LLM 연결 테스트 실패: {e}\")\n            return False\n    \n    async def test_web_search(self):\n        \"\"\"웹 검색 테스트\"\"\"\n        try:\n            from core.web_searcher import WebSearcher\n            \n            searcher = WebSearcher()\n            results = searcher.search_links(\"python programming\")\n            \n            if results and len(results) > 0:\n                logger.info(f\"검색 결과 {len(results)}개 발견\")\n                logger.info(f\"첫 번째 결과: {results[0]['title'][:50]}...\")\n                return True\n            else:\n                logger.warning(\"검색 결과가 없음\")\n                return False\n                \n        except Exception as e:\n            logger.error(f\"웹 검색 테스트 실패: {e}\")\n            return False\n    \n    async def test_browser_controller(self):\n        \"\"\"브라우저 컨트롤러 테스트\"\"\"\n        try:\n            from core.browser_controller import BrowserController\n            \n            browser = BrowserController()\n            result = await browser.browse_website(\n                url=\"https://httpbin.org/html\",\n                action=None,\n                close_browser=True\n            )\n            \n            if result.get(\"status\") == \"success\":\n                logger.info(f\"브라우저 테스트 성공: {result.get('page_title', 'No title')}\")\n                return True\n            else:\n                logger.warning(f\"브라우저 테스트 실패: {result.get('error_message')}\")\n                return False\n                \n        except Exception as e:\n            logger.error(f\"브라우저 컨트롤러 테스트 실패: {e}\")\n            return False\n    \n    async def test_pipeline_initialization(self):\n        \"\"\"파이프라인 초기화 테스트\"\"\"\n        try:\n            from pipelines.agent_pipeline import AgentPipeline\n            \n            # 상태 콜백 함수\n            def test_callback(message):\n                logger.debug(f\"[PIPELINE_CALLBACK] {message}\")\n            \n            pipeline = AgentPipeline(streamlit_status_callback=test_callback)\n            \n            # 파이프라인 객체의 주요 컴포넌트들이 초기화되었는지 확인\n            if (hasattr(pipeline, 'llm_handler') and \n                hasattr(pipeline, 'web_searcher') and \n                hasattr(pipeline, 'browser_controller') and\n                hasattr(pipeline, 'data_extractor') and\n                hasattr(pipeline, 'excel_writer')):\n                logger.info(\"파이프라인 모든 컴포넌트 초기화 성공\")\n                return True\n            else:\n                logger.warning(\"파이프라인 일부 컴포넌트 초기화 실패\")\n                return False\n                \n        except Exception as e:\n            logger.error(f\"파이프라인 초기화 테스트 실패: {e}\")\n            return False\n    \n    async def test_error_handling(self):\n        \"\"\"오류 처리 테스트\"\"\"\n        try:\n            from utils.error_handler import handle_async_errors, safe_execute_async\n            \n            # 의도적으로 오류를 발생시키는 함수\n            @handle_async_errors(default_return=\"error_handled\")\n            async def failing_function():\n                raise ValueError(\"Test error\")\n            \n            result = await failing_function()\n            \n            if result == \"error_handled\":\n                logger.info(\"오류 처리 데코레이터 작동 확인\")\n                return True\n            else:\n                logger.warning(f\"예상과 다른 오류 처리 결과: {result}\")\n                return False\n                \n        except Exception as e:\n            logger.error(f\"오류 처리 테스트 실패: {e}\")\n            return False\n    \n    def generate_final_report(self):\n        \"\"\"최종 테스트 보고서 생성\"\"\"\n        logger.info(\"=== 최종 테스트 보고서 ===\")\n        \n        total_tests = len(self.test_results)\n        passed_tests = sum(1 for result in self.test_results.values() if result)\n        failed_tests = total_tests - passed_tests\n        \n        logger.info(f\"총 테스트: {total_tests}\")\n        logger.info(f\"성공: {passed_tests}\")\n        logger.info(f\"실패: {failed_tests}\")\n        logger.info(f\"성공률: {(passed_tests/total_tests)*100:.1f}%\")\n        \n        logger.info(\"\\n=== 개별 테스트 결과 ===\")\n        for test_name, result in self.test_results.items():\n            status = \"✅\" if result else \"❌\"\n            logger.info(f\"{status} {test_name}\")\n        \n        if self.errors:\n            logger.info(f\"\\n=== 오류 보고서 ({len(self.errors)}개) ===\")\n            for i, error in enumerate(self.errors, 1):\n                logger.error(f\"오류 {i}: {error['error_type']} - {error['error_message']}\")\n                save_error_log(error, f\"integration_test_error_{i}.log\")\n        \n        success_rate = (passed_tests / total_tests) * 100\n        overall_success = success_rate >= 80.0  # 80% 이상 성공 시 전체 성공으로 간주\n        \n        if overall_success:\n            logger.info(\"\\n🎉 최종 통합 테스트 성공!\")\n        else:\n            logger.error(\"\\n💥 최종 통합 테스트 실패!\")\n        \n        return overall_success\n\nasync def main():\n    \"\"\"메인 테스트 실행 함수\"\"\"\n    test_suite = IntegrationTestSuite()\n    success = await test_suite.run_all_tests()\n    \n    return success\n\nif __name__ == \"__main__\":\n    result = asyncio.run(main())\n    sys.exit(0 if result else 1)\n